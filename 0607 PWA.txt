20230606 ~ 20230609
Progressive Web Apps (javascript, react, vue)

[20230607]
1. PWA
2. PWA 필수 요소/ 주요기능
 3. 매니페스트 작성
 4. 서비스 워커 작성
5. 메인 화면 작성/ 실행
6. 서비스워커 동작 확인 및 삭제

1.
특징
- 웹 장점 그대로 유지/ 네이티브 앱의 강점 추가
- 네이티브 앱의 강력한 기능성과 웹의 접근성 모두 갖춤 = " 하이브리드 앱 "
    하이브리드 앱 = 모바일 웹/앱(모바일 앱) + 네이티브 앱 : 모바일웹/앱을 네이티브 앱으로 패키징


"네이티브 앱은 기기에 최적화된 기능을 구현하다."
    개발
    - (장점) 스마트폰에 최적화된 기능 구현 가능(네이버앱)

    - (단점) 개발 난이도가 높고 시간이 오래 걸린다
    - (단) 같은 서비스를 운영체제별로 만들어야 한다 (AOS - JAVA 기반  /  IOS - C언어 기반)

    배포
    - (장) 전 세계를 시장으로 삼을 수 있다

    - (단) 업데이트가 생기면 다시 설치해야 함
    - (단) 앱 시장이 포화 상태여서 선택 받기 어려움

    사용
    - (장) 홈 화면에서 아이콘을 눌러 손쉽게 접속
    - (장) 알림을 통해 재방문 유도 가능

    - (단) 기기의 용량을 많이 차지


"모바일 웹/앱은 비용이 저렴하고 업데이트하기 쉽다."
    개발
    - (장) 이미 익숙한 웹 기술 그대로 이용 가능
    - (장) 개발 시간 단축
    
    - (단) 모든 하드웨어의 기능을 사용할 수 없다
    - (단) 네이티브 앱과 같은 푸시 알림 기능을 사용할 수 없다

    배포
    - (장) 웹 브라우저만 있으면 어디든 배포할 수 있다

    - (단) 앱 스토어, 플레이 스토어 이용할 수 없다

    사용
    - (장) 실시간으로 유지/보수 가능

    - (단) 네이티브 앱과 같은 빠르고 풍부한 사용자 경험에 제약
    - (단) 인터넷 접속이 끊어지면 사용할 수 없다


"하이브리드 앱은 네이티브 앱과 웹앱의 강점을 합치다."
    개발
    - (장) 기존에 사용하던 웹 개발 기술을 모든 운영체제에서 그대로 사용 가능
    - (장) 같은 코드를 모바일 운영체제 별로 다르게 패키징할 수 있다 (web으로 만들어서 c/java로 패키징)

    - (단) 하드웨어 기능을 사용할 수 있으나 연결해주는 플러그인에 의존해야 하므로 제약이 있을 수 있다.

    배포
    - (장) 네이티브 앱처럼 앱 스토어, 플레이 스토어에 배포할 수 있다.

    - (단) 네이티브 앱의 배포와 같으므로 업데이트가 생기면 다시 내려 받아야 한다
    - (단) 앱 시장이 포화 상태여서 선택 받기가 어렵다

    사용
    - (장) 네이티브 앱과 유사한 사용자 경험을 제공한다

    - (단) 네이티브 앱과 같은 성능을 내는 데는 한계가 있다

[favicon splash 화면~~~ : png 많이 사용(png 투명 배경, 해상도 높)]


"프로그래시브 웹 앱 = 네이티브 앱 + 모바일 웹앱 + 하이브리드앱"
    개발
    - (장) 이미 익숙한 웹 기술을 그대로 이용
    - (장) 개발 시간 단축할 수 있음
    - (장) 푸시 알림, 오프라인 캐시, HTTPS사용 가능

    - (단) 하드웨어 사용은 웹 API를 통하므로 웹 표준을 지원하는 브라우저 반드시 필요

    배포
    - (장) 웹 브라우저만 있으면 어디든 배포할 수 있다
    - (장) '홈 화면 설치' 기능을 통해 OS 응용프로그램으로 설치할 수 있다
    - (장) 실시간으로 유지, 보수할 수 있다

    - (단) 앱 스토어, 플레이 스토어를 이용할 수 없다. 하지만 코르도바를 사용하면 동일한 코드베이스로 배포할 수 있다

    사용
    - (장) 빠른 실행속도로 네이티브 앱과 유사한 사용자 경험을 제공한다

    - (단) 안드로이드, 윈도우 OS는 PWA의 모든 기능을 사용할 수 있으나 현재 IOS의 경우는 일부만 사용할 수 있다.

"PWA"
 강점(네이티브 앱+모바일 웹앱 + 하이브리드앱) -> 프로그레시브 웹앱

    == 본질은 웹이지만 앱처럼 쓸 수 있어야 한다
    -> 네이티브 앱과 똑같은 사용자 경험을 제공하는 것이 궁극적인 목표 
    -> 앱을 향해 조금씩 앞으로 나아가야(progressive) 한다는 철학



2.
PWA 필수 요소
    1/ 서비스 워커
    2/ 웹앱 매니페스트
    3/ HTTPS (https : github / http : dothome)


주요 기능(네이티브 앱과 같은 경험)
    4/ 푸시 알림
    5/ 홈 화면에 추가(A2HS, Add To Home Screen)
    6/ 웹 API


    1/ 서비스 워커
    - 웹 브라우저 내에 있음
    - 웹 페이지와 분리
    - 항상 실행되고 있는 "백그라운드 프로그램"
    - 캐시 관리
        
        웹 브라우저 { [웹 페이지]  <- 캐시 / 웹API / 푸시알림 / 매니페스트 ->  [서비스 워커] }  <- HTTPS ->  [서버]

    2/ 웹앱 매니페스트 (manifest.json : https://developer.mozilla.org/en-US/docs/Web/Manifest)
    - 앱 소개 정보
    - 앱 기본 설정
    - JSON 파일 형식
    - A2HS (add to home screen)    

    3/ 보안을 강화한 'HTTPS'
    - 암호화와 인증을 거쳐 보안을 강화한 웹 통신 규약
    - 반응속도가 http보다 빠름 (http://www.httpvshttps.com)
    - PWA는 로컬에서도 동작 가능 
        
        (https://,  http://localhost,  http://127.0.0.1/ = 루프백주소)
        IP : 컴퓨터의 고유한 이름(=숫자)
            IPv4 = 000 ~ 255.B.C.D (한국 = ip 맨 앞 숫자 211.~)
            -> IP 부족
            -> 가상 IP = 
            IPv6
        DNS (domain name service) : 이름으로 검색했을 때 웹의 DNS server가 이름에 해당하는 숫자 찾아서 연결

3.
{
    "name":"안녕하세요! PWA by JS",
    "short_name":"PWA by JS",
    "description":"PWA start program",
    "scope":".",
    "start_url":"./", //index
    "display":"fullscreen",
    "orientation":"portrait", //방향
    "theme_color":"#fff",
    "background_color":"#fff",
    "icons":[         //splash icon : https://progressier.com/pwa-icons-and-ios-splash-screen-generator
        {
            "src":"images/icons/512x512.png",
            "sizes":"512x512",
            "type":"image/png"
        }
    ]
}
    1. name
        - 첫 화면(스플래시 스크린)에 출력될 이름
        - 옴니(다운로드 설치) 버튼에도 출력
        - 홈 화면 아이콘        
    2. short_name
        - 주로 모바일에서 사용 (아이콘 밑에 이름~)
        - 설치 배너에 출력
    3. description
        - 웹 크롤러(검색엔진)이 정보 가져갈 때 사용
    4. scope
        - 매니페스트에 정의된 내용이 적용될 수 있는 파일들의 경로 범위를 지정
        - 웹앱이 어느 폴더에 있는지 지정
        - "." : 현재 폴더에 있는 모든 파일
    5. start_url
        - 프로그램을 실행하면 시작될 URL을 루트 경로(./)로 설정
        - index.html 파일이 있는 폴더 지정
    6. display : 화면 표시 방법 설정
        - standalone
            : 브라우저의 주소표시줄, 상태표시줄 제거하여 일반 앱처럼 표시
            : 가장 보편적으로 사용
        - fullscreen
            : 기기의 최대 화면
            : 운영체제가 fullscreen을 지원하지 않으면 standalone으로 적용
        - browser
            : 웹 브라우저와 동일한 모습으로 실행
        (
        - minimal-ui
            : 상단에 주소 표시줄 추가
            : 운영체제가 minimal-ui를 지원하지 않으면 standalone으로 적용
        )
    7. orientation : 화면 실행 방향 설정
        - portrait
            : 세로로 화면 실행
        - landscape
            : 가로로 화면 실행
    8. theme_color
        - 앱 테마 색상 (=상단바?!)
    9. background_color
        - 앱 화면 배경 색
    10. icons
        - src
            : 이미지의 절대 주소 또는 상대 주소
        - sizes
            : 이미지의 픽셀 크기
        - type
            : 이미지의 파일 유형
    + shortcuts : 바로가기 설정
        - MS 제품군 OS 아래쪽 아이콘 > 마우스 오른쪽 > 메뉴들 중 상단 메뉴 ex) 새창
        - name
            : 마우스 오른쪽 클릭 시 출력될 이름
        - short_name 
            : 모바일에서 앱 설치 후 클릭했을 때 출력
        - Index.html 실행 > 옴니버튼 > 다운로드 실행 > 운영체제 하단 설치된 파일에서 마우스 오른쪽 > 이름에 작성된 내용과 아이콘 확인


4. 서비스워커 생애주기(lifecycle)
    - 서비스워커등록(registration)                   index.html
                                                         
    - Install(서비스워커 처음 설치)                -      v
               v (wait)
    - Activate(서비스워커 동작, 변경)              - service-worker.js
               v
    - Fetch(데이터요청)  <->  Idle(이벤트 기다림)  -

        1. HTML   <->                         인터넷
        2. HTML -fetch-> 서비스워커            인터넷
           HTML   <-     서비스워커 <-> 캐시(=메모장?!), 스토리지, 인터넷

                self.addEventListener("install", pEvent =>{ // = function(pEvent){} 매개변수 정의x:event정보
                    console.log("서비스 워커 설치 완료!");
                }); // = self.addEventListener("install", function(pEvent){})
                self.addEventListener("activate", pEvent =>{
                    console.log("서비스워커 동작");
                });
                self.addEventListener("fetch", pEvent =>{ 
                    console.log("데이터 요청(fetch)!", pEvent.request);
                });
                /*
                function aa(){}
                <button onclick="aa">
                ----------------------
                <button id="btn">
                btn.onclick=function(){}
                ------------------------------------------
                btn.addEventListener("click",function(){})
                */





[20230608]
4. 서비스워커
    1/ install 이벤트
        self.addEventListener("install", pEvent =>{ 
            ~
        })
    2/ 서비스 워커 업데이트 - activate 이벤트
        self.addEventListener('activate', pEvent=>{
            ~
        });
    3/ 오프라인 전환 시 동작 - fetch 이벤트
        self.addEventListener('fetch',()=>{
            ~
        });

    서비스 워커의 주요 이벤트 복습하기
        1/ install
            - 서비스워커가 처음 설치될 때 실행
            - 캐시 파일 저장

        2/ activate
            - 서비스워커 설치 완료 시 실행
            - 서비스워커의 업데이트 담당
            - 기존 캐시 제거

        3/ fetch
            - 서비스워커 실행 시 작업할 내용 작성
            - 브라우저가 서버에 HTTP 요청 시 오프라인 상태면 캐시 파일 읽기


    서비스 워커 & 캐시 데이터 삭제
        : F12 -> Application -> Storage -> Clear site data